<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Eclipse</title>
      <link href="2021/01/12/eclipse/"/>
      <url>2021/01/12/eclipse/</url>
      
        <content type="html"><![CDATA[<h1 id="eclipse"><a class="markdownIt-Anchor" href="#eclipse">#</a> Eclipse</h1><h2 id="结构"><a class="markdownIt-Anchor" href="#结构">#</a> 结构</h2><p>左侧： 结构 1： Package Explorer</p><p>​结构 2 ：Navigator</p><p>​结构 3：Outline</p><p>下面：结构 :4: Console</p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置">#</a> 配置</h2><h3 id="字符"><a class="markdownIt-Anchor" href="#字符">#</a> 字符</h3><img src="https://img-blog.csdnimg.cn/20210112231459944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70" style="zoom: 50%;"><img src="https://img-blog.csdnimg.cn/20210112231500142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70" style="zoom:50%;"><h3 id="字体"><a class="markdownIt-Anchor" href="#字体">#</a> 字体</h3><img src="https://img-blog.csdnimg.cn/2021011223150090.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70" style="zoom:50%;"><img src="https://img-blog.csdnimg.cn/2021011223151324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70" style="zoom:50%;"><h3 id="修改new菜单"><a class="markdownIt-Anchor" href="#修改new菜单">#</a> 修改 new 菜单</h3><img src="https://img-blog.csdnimg.cn/20210112231512964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70" style="zoom:50%;"><img src="https://img-blog.csdnimg.cn/2021011223151355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70" style="zoom:50%;"><img src="https://img-blog.csdnimg.cn/2021011223151330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70" alt="保存" style="zoom:50%;"><h2 id="helloworld"><a class="markdownIt-Anchor" href="#helloworld">#</a> helloworld</h2><p>先 new Java Project</p><p>在 src 下 new package</p><p>在包下 new class</p><h3 id="导入工程"><a class="markdownIt-Anchor" href="#导入工程">#</a> 导入工程</h3><img src="https://img-blog.csdnimg.cn/20210112235144400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70" style="zoom: 50%;"><img src="https://img-blog.csdnimg.cn/20210112235144428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2_Java基本语法</title>
      <link href="2021/01/09/2-java-ji-ben-yu-fa/"/>
      <url>2021/01/09/2-java-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="java基本语法"><a class="markdownIt-Anchor" href="#java基本语法">#</a> Java 基本语法</h1><h2 id="关键字与保留字"><a class="markdownIt-Anchor" href="#关键字与保留字">#</a> 关键字与保留字</h2><h3 id="关键字"><a class="markdownIt-Anchor" href="#关键字">#</a> 关键字</h3><p>定义：被 被 Java 语言赋予了特殊含义，用做专门用途的字符串（单词）<br>特点： 关键字中所有字母都为小写</p><h3 id="保留字"><a class="markdownIt-Anchor" href="#保留字">#</a> 保留字</h3><p>Java 保留字：现有 Java 版本尚未使用，但以后版本可能会作为关键字使<br>用。自己命名标识符时要避免使用这些保留字<br> goto 、const</p><h2 id="标识符"><a class="markdownIt-Anchor" href="#标识符">#</a> 标识符</h2><h3 id="标识符-2"><a class="markdownIt-Anchor" href="#标识符-2">#</a> 标识符</h3><p>Java 对各种 变量、 方法和 类等要素命名时使用的字符序列称为标识符<br> 技巧：凡是自己可以起名字的地方都叫标识符</p><h3 id="定义合法标识符规则"><a class="markdownIt-Anchor" href="#定义合法标识符规则">#</a> 定义合法标识符规则：</h3><p>由 26 个英文字母大小写，0-9  ，_或 或 $  组成<br> 数字不可以开头。<br> 不可以使用关键字和保留字，但能包含关键字和保留字。<br>Java 中严格区分大小写，长度无限制。<br> 标识符不能包含空格</p><h3 id="java中的名称命名规范"><a class="markdownIt-Anchor" href="#java中的名称命名规范">#</a> Java 中的名称命名规范</h3><p> 包名：多单词组成时所有字母都小写：xxxyyyzzz<br> 类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz<br> 变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个<br>单词首字母大写：xxxYyyZzz<br> 常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</p><h2 id="变量"><a class="markdownIt-Anchor" href="#变量">#</a> 变量</h2><h3 id="变量-2"><a class="markdownIt-Anchor" href="#变量-2">#</a> 变量</h3><p>内存中的一个存储区域<br>该区域的数据可以在同一类型范围内不断变化<br>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值</p><h3 id="注意"><a class="markdownIt-Anchor" href="#注意">#</a> 注意</h3><p>Java 中每个变量必须先声明，后使用<br>使用变量名来访问这块区域的数据<br>变量的作用域：其定义所在的一对 { } 内<br>变量只有在其作用域内才有效<br>同一个作用域内，不能定义重名的变量</p><h3 id="声明-赋值"><a class="markdownIt-Anchor" href="#声明-赋值">#</a> 声明 赋值</h3><p>声明变量<br> 语法：&lt;数据类型&gt; &lt; 变量名称 &gt;<br> 例如：int var;<br> 变量的赋值<br> 语法：&lt;变量名称&gt; = &lt; 值 &gt;<br> 例如：var = 10;<br> 声明和赋值变量<br> 语法： &lt;数据类型&gt; &lt; 变量名 &gt; = &lt; 初始化值 &gt;<br> 例如：int var = 10;</p><h3 id="变量的分类"><a class="markdownIt-Anchor" href="#变量的分类">#</a> 变量的分类</h3><h4 id="按数据类型"><a class="markdownIt-Anchor" href="#按数据类型">#</a> 按数据类型</h4><p><img src="https://img-blog.csdnimg.cn/20210109211327831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70" alt="数据类型分类"></p><h4 id="按声明的位置的不同"><a class="markdownIt-Anchor" href="#按声明的位置的不同">#</a> 按声明的位置的不同</h4><p>  在方法体外，类体内声明的变量称为 成员变量 。<br>  在方法体内部声明的变量称为 局部变量 。</p><p><img src="https://img-blog.csdnimg.cn/20210109211850402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="按声明的位置的不同"></p><p>● 注意：二者在初始化值方面的异同:<br> 同：都有生命周期 异：局部变量除形参外，需显式初始化</p><h2 id="整数类型"><a class="markdownIt-Anchor" href="#整数类型">#</a> 整数类型</h2><p>java 的整型常量默认为 int 型，声明 long 型常量须后加‘l’或‘L’</p><p><img src="https://img-blog.csdnimg.cn/20210109212151917.png#pic_center" alt="整数"></p><h2 id="浮点类型"><a class="markdownIt-Anchor" href="#浮点类型">#</a> 浮点类型</h2><p>浮点型常量有两种表示形式：<br>十进制数形式：如：5.12 512.0f .512 (必须有小数点）<br>科学计数法形式：如：5.12e2 512E2 100E-2<br> float: 单精度，尾数可以精确到 7 位有效数字。很多情况下，精度很难满足需求。<br>double: 双精度，精度是 float 的两倍。通常采用此类型。<br> Java  的浮点型常量默认为 double 型 型，明 声明 float 型常量，须后加‘f’ 或‘F’ 。</p><p>float 表示数值的范围比 long 还大</p><p><img src="https://img-blog.csdnimg.cn/20210110010352218.png" alt="浮点类型"></p><h2 id="字符类型"><a class="markdownIt-Anchor" href="#字符类型">#</a> 字符类型</h2><p>char 型数据用来表示通常意义上 “字符”(2 字节)<br>Java 中的所有字符都使用 Unicode 编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。<br>char 类型是可以进行运算的。因为它都对应有 Unicode 码。</p><h3 id="字符型变量的三种表现形式"><a class="markdownIt-Anchor" href="#字符型变量的三种表现形式">#</a> 字符型变量的三种表现形式</h3><p>字符常量是用单引号 (‘ ’) 括起来的单个字符。例如：char c1 = ‘a’; char c2= ‘中’; char c3 = ‘9’;<br> Java 中还允许使用转义字符‘\’来将其后的字符转变为特殊字符型常量。例如：char c3 = ‘\n’; // '\n’表示换行符<br>直接使用 Unicode 值来表示字符型常量：‘\uXXXX’。其中，XXXX 代表一个十六进制整数。如：\u000a 表示 \n。</p><p><img src="https://img-blog.csdnimg.cn/20210110010352220.png" alt="转义字符"></p><h2 id="布尔类型"><a class="markdownIt-Anchor" href="#布尔类型">#</a> 布尔类型</h2><p>Java 虚拟机中没有任何供 boolean 值专用的字节码指令，Java 语言表达所操作的 boolean 值，在编译之后都使用 java 虚拟机中的 int 数据类型来代替：true 用 1 表示，false 用 0 表示。</p><h2 id="基本数据类型转换"><a class="markdownIt-Anchor" href="#基本数据类型转换">#</a> 基本数据类型转换</h2><h3 id="自动类型转换"><a class="markdownIt-Anchor" href="#自动类型转换">#</a> 自动类型转换</h3><p>容量小的类型自动转换为容量大的数据类型。数据类型按容量大小排序为：</p><p><img src="https://img-blog.csdnimg.cn/20210110010619749.png#pic_center" alt="自动类型转换"></p><p>byte,short,char 之间不会相互转换，他们三者在计算时首先转换为 int 类型。<br>boolean 类型不能与其它数据类型运算。<br>当把任何基本数据类型的值和字符串 (String) 进行连接运算时 (+)，基本数据类型的值将自动转化为字符串 (String) 类型。</p><h3 id="强制类型转换"><a class="markdownIt-Anchor" href="#强制类型转换">#</a> 强制类型转换</h3><p>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。</p><p>boolean 类型不可以转换为其它的数据类型。</p><h2 id="字符串类型"><a class="markdownIt-Anchor" href="#字符串类型">#</a> 字符串类型</h2><p> 使用方式与基本数据类型一致。例如：String str = “abcd”;<br> 一个字符串可以串接另一个字符串，也可以直接串接其他类型的数据。</p><h2 id="进制"><a class="markdownIt-Anchor" href="#进制">#</a> 进制</h2><p>二进制 (binary) ：0,1 ，满 2 进 1. 以 0b 或 0B 开头。<br>八进制 (octal) ：0-7 ，满 8 进 1. 以数字 0 开头表示。<br>十六进制 (hex) ：0-9 及 A-F，满 16 进 1. 以 0x 或 0X 开头表示</p><h2 id="运算符"><a class="markdownIt-Anchor" href="#运算符">#</a> 运算符</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><p>算术运算符<br>赋值运算符<br>比较运算符（关系运算符）<br>逻辑运算符<br>位运算符<br>三元运算符</p><h3 id="算术运算符"><a class="markdownIt-Anchor" href="#算术运算符">#</a> 算术运算符</h3><p><img src="https://img-blog.csdnimg.cn/20210110010352199.png" alt="算术运算符"></p><p>% 取余运算，结果的符号与被模数的符号相同</p><p>自增 1 不会改变本身变量的数据类型</p><h3 id="赋值运算符"><a class="markdownIt-Anchor" href="#赋值运算符">#</a> 赋值运算符</h3><p>符号：=  支持连续赋值。</p><p>+= 不会改变变量本身的数据类型</p><h3 id="比较运算符"><a class="markdownIt-Anchor" href="#比较运算符">#</a> 比较运算符</h3><p>比较运算符的结果都是 boolean 型，也就是要么是 true，要么是 false。</p><p>instanceof 检查是否是类的对象 “Hello” instanceof String true</p><h3 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符">#</a> 逻辑运算符</h3><p>&amp;— 逻辑与 | — 逻辑或 ！— 逻辑非  &amp;&amp; — 短路与 || — 短路或 ^ — 逻辑异或</p><p>逻辑运算符用于连接布尔型表达式</p><p>“&amp;” 和 “&amp;&amp;” 的区别：<br>单 &amp; 时，左边无论真假，右边都进行运算；<br>双 &amp; 时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。</p><h3 id="位运算符"><a class="markdownIt-Anchor" href="#位运算符">#</a> 位运算符</h3><p>运算符 运算 范例<br> &lt;&lt;左移 3 &lt;&lt; 2 = 12 --&gt; 3<em>2</em>2=12</p><p>右移 3 &gt;&gt; 1 = 1 --&gt; 3/2=1</p><p>无符号右移 3 &gt;&gt;&gt; 1 = 1 --&gt; 3/2=1<br>&amp; 与运算 6 &amp; 3 = 2<br>| 或运算 6 | 3 = 7<br>^ 异或运算 6 ^ 3 = 5<br>~ 取反运算～6 = -7</p><p>&lt;&lt; 空位补 0，被移除的高位丢弃，空缺位补 0。</p><p>//&lt;&lt; 被移位的二进制最高位是 0，右移后，空缺位补 0；最高位是 1，空缺位补 1。</p><p>// &lt;&lt;&lt; 被移位二进制最高位无论是 0 或者是 1，空缺位都用 0 补</p><h3 id="三元运算符"><a class="markdownIt-Anchor" href="#三元运算符">#</a> 三元运算符</h3><p>(条件表达式)? 表达式 1 ：表达式 2</p><h2 id="运算符的优先级"><a class="markdownIt-Anchor" href="#运算符的优先级">#</a> 运算符的优先级</h2><p>只有单目运算符、三元运算符、赋值运算符是从右向左运算的。</p><h2 id="程序流程控制"><a class="markdownIt-Anchor" href="#程序流程控制">#</a> 程序流程控制</h2><p>顺序结构<br>分支结构<br>循环结构</p><h3 id="scanner"><a class="markdownIt-Anchor" href="#scanner">#</a> Scanner</h3><p>1 &gt; 导包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2&gt;Scanner 的实例化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3 &gt; 调用 Scanner 类的相关方法，来获取指定类型的变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于 char 型的获取，Scanner 没有提供相应的方法</p><h3 id="switch-case"><a class="markdownIt-Anchor" href="#switch-case">#</a> switch-case</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> 常量<span class="token number">1</span><span class="token operator">:</span>        语句<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// break;</span>    <span class="token keyword">case</span> 常量<span class="token number">2</span><span class="token operator">:</span>        语句<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">// break;</span>    … …    <span class="token keyword">case</span> 常量<span class="token class-name">N</span><span class="token operator">:</span>        语句<span class="token class-name">N</span><span class="token punctuation">;</span>        <span class="token comment">// break;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        语句<span class="token punctuation">;</span>        <span class="token comment">// break;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1&gt;break 语句用来在执行完一个 case 分支后使程序跳出 switch 语句块；如果没有 break，程序会顺序执行到 switch 结尾</p><p>2&gt;switch (表达式) 中表达式的值 必须是下述几种类型之一：byte ，short,char ，int， 枚举 (jdk 5.0) ，String (jdk 7.0)；</p><p>3&gt; default 子句是 可任选的 的。同时，位置也是灵活的。当没有匹配的 case 时，执行 default</p><h3 id="循环结构"><a class="markdownIt-Anchor" href="#循环结构">#</a> 循环结构</h3><p>for 循环<br>while 循环<br>do-while 循环</p><p>循环语句的四个组成部分<br>①初始化部分 (init_statement)<br>②循环条件部分 (test_exp)<br>③循环体部分 (body_statement)<br>④迭代部分 (alter_statement)</p><h4 id="for循环"><a class="markdownIt-Anchor" href="#for循环">#</a> for 循环</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>① 初始化 部分<span class="token punctuation">;</span> ② 循环条件部分<span class="token punctuation">;</span> ④ 迭代部分<span class="token punctuation">)</span>｛③ 循环体部分<span class="token punctuation">;</span>｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔<br>④可以有多个变量更新，用逗号分隔</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ForTest</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> sum<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>sum<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>错误：可能尚未初始化变量sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="while循环"><a class="markdownIt-Anchor" href="#while循环">#</a> while 循环</h4><p>①初始化部分<br> while (②循环条件部分)｛ ｛<br>③循环体部分；<br>④迭代部分；<br>}</p><h4 id="do-while"><a class="markdownIt-Anchor" href="#do-while">#</a> do-while</h4><p>①初始化部分；<br>do{<br>③ 循环体部分<br>④ 迭代部分<br>} while (②循环条件部分);</p><p>do-while 循环至少执行一次循环体</p><h3 id="最简单-无限-循环"><a class="markdownIt-Anchor" href="#最简单-无限-循环">#</a> 最简单 “无限” ”  循环</h3><p>最简单 “无限” ”  循环： 格式：while (true) , for (;😉, 无限循环存在的原因是并不知道循环多少次， 需要 根据循环体内部某些 条件，来 控制 循环的结束</p><h3 id="currenttimemillis"><a class="markdownIt-Anchor" href="#currenttimemillis">#</a> currentTimeMillis()</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> start<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="break-continue"><a class="markdownIt-Anchor" href="#break-continue">#</a> break continue</h3><p>break 语句用于终止某个语句块的执行，结束当前循环</p><p>continue 语句用于跳过其所在循环语句块的一次执行，继续下一次循环，结束当次循环</p><p>两个关键字后面都不能声明执行语句，会报错</p><h4 id="label"><a class="markdownIt-Anchor" href="#label">#</a> label</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LabelTest</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>label<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">continue</span> label<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="return"><a class="markdownIt-Anchor" href="#return">#</a> return</h3><p>return：并非专门用于结束循环的，它的功能是结束一个方法。当一个方法执行到一个 return 语句时，这个方法将被结束。</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1_Java语言概述</title>
      <link href="2021/01/08/1-java-yu-yan-gai-shu/"/>
      <url>2021/01/08/1-java-yu-yan-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="java语言概述"><a class="markdownIt-Anchor" href="#java语言概述">#</a> Java 语言概述</h1><h2 id="jdk-jre"><a class="markdownIt-Anchor" href="#jdk-jre">#</a> JDK JRE</h2><p>・JDK = JRE + 开发工具集（例如 Javac 编译工具等）<br>・JRE = JVM + Java SE 标准类库</p><h3 id="jdk"><a class="markdownIt-Anchor" href="#jdk">#</a> JDK</h3><p>JDK (Java Development Kit Java 开发工具包)</p><p>JDK 是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，也包括了 JRE。所以安装了 JDK，就不用在单独安装 JRE 了。其中的开发工具：编译工具 (javac.exe)  打包工具 (jar.exe) 等</p><h3 id="jre"><a class="markdownIt-Anchor" href="#jre">#</a> JRE</h3><p>JRE (Java Runtime Environment Java 运行环境)</p><p>包括 Java 虚拟机 (JVM Java Virtual Machine) 和 Java 程序所需的核心类库等，如果想要运行一个开发好的 Java 程序，计算机中只需要安装 JRE 即可</p><h2 id="jdk安装"><a class="markdownIt-Anchor" href="#jdk安装">#</a> JDK 安装</h2><p>安装时会跳出安装 jre。</p><h3 id="环境变量"><a class="markdownIt-Anchor" href="#环境变量">#</a> 环境变量</h3><p>path：windows 系统执行命令时要搜寻的路径。</p><p>JAVA_HOME:bin 的上一层目录</p><p>path:%JAVA_HOME%/bin</p><h2 id="第一个java程序"><a class="markdownIt-Anchor" href="#第一个java程序">#</a> 第一个 Java 程序</h2><p><img src="https://img-blog.csdnimg.cn/20210109001413925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="avatar"></p><p>字节码文件名是类名</p><h2 id="注释"><a class="markdownIt-Anchor" href="#注释">#</a> 注释</h2><p>1.// 单行</p><p>2./*</p><p>多行</p><p>*/</p><ol start="3"><li></li></ol><p>/**</p><p>文档注释</p><p>*/</p><p>注释内容可以被 JDK 提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">javadoc <span class="token operator">-</span>encoding UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span>charset UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span>d myHello <span class="token operator">-</span>author <span class="token operator">-</span>version <span class="token class-name">HelloJava</span><span class="token punctuation">.</span>java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="api"><a class="markdownIt-Anchor" href="#api">#</a> API</h2><p>API （Application Programming Interface, 应用程序编程接口）是 Java 提供的基本编程接口。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结">#</a> 总结</h2><p>1. 在一个 Java 源文件中可以声明多个 class, 只能有一个声明为 public 的，而且声明为 public 的类的类命必须与源文件名相同。</p><p>2. 程序的入口是 main 方法</p><p>3. 编译后，会生成一个或多个字节码文件，字节码文件的文件名与 Java 源文件中的类名相同</p><h2 id="ide"><a class="markdownIt-Anchor" href="#ide">#</a> IDE</h2><p>Integrated Development Environment</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/12/18/hello-world/"/>
      <url>2020/12/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post">#</a> Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server">#</a> Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files">#</a> Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
